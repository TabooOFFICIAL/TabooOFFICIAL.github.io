{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","state","web3","provider","accounts","isWalletConnected","bscAddress","email","discordId","tgUsername","price","amount","validated","purchasePending","componentDidMount","a","providerOptions","walletconnect","package","WalletConnectProvider","options","infuraId","web3Modal","Web3Modal","clearCachedProvider","setState","eth","getAccounts","length","handleAddressChange","event","target","value","toString","lenght","valid","handleInputChange","type","checked","name","handleAmount","handleSubmit","currentTarget","checkValidity","preventDefault","stopPropagation","purchase","validateAddress","minABI","constant","inputs","outputs","Web3","validText","ctr","Contract","methods","balanceOf","call","result","utils","fromWei","connect","web3Provider","on","error","console","log","net","getNetworkType","network","alert","doPurchase","toAddress","process","calcAmount","amountToSend","toWei","sendTransaction","from","to","hash","storeData","sendConfirmationEmail","transactionFullfilled","txid","axios","post","txId","then","response","catch","emailjs","send","purchasePrice","className","Container","style","textAlign","Card","Body","fontSize","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.213c37e5.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport { Form, Button, InputGroup, Container, FormControl, Card } from \"react-bootstrap\";\nimport Web3 from \"web3\";\nimport axios from 'axios';\nimport emailjs from 'emailjs-com';\nimport Web3Modal from 'web3modal';\nimport WalletConnectProvider from \"@walletconnect/web3-provider\";\n\nimport \"./App.css\";\n\nclass App extends Component {\n\n  state = {\n    web3: null,\n    provider: null,\n    accounts: null,\n    isWalletConnected: false,\n    bscAddress: \"\",\n    email: \"\",\n    discordId: \"\",\n    tgUsername: \"\",\n    price: 0.05,\n    amount: 1,\n    validated: false,\n    purchasePending: false\n  };\n\n  componentDidMount = async () => {\n    const providerOptions = {\n      walletconnect: {\n        package: WalletConnectProvider, // required\n        options: {\n          infuraId: \"43e7c1b12410407880552f46b67d3e30\"\n        }\n      }\n    };\n\n    const web3Modal = new Web3Modal({\n      providerOptions // required\n    });\n\n    web3Modal.clearCachedProvider();\n\n    this.setState({ provider: web3Modal, isWalletConnected: false });\n  }\n\n  isWalletConnected = async (web3) => {\n\n    let isWalletConnected = false;\n    const accounts = await web3.eth.getAccounts();\n\n    if (accounts.length > 0) {\n      isWalletConnected = true;\n    }\n\n    this.setState({ isWalletConnected: isWalletConnected, accounts: accounts });\n  }\n\n  handleAddressChange = (event) => {\n    if (!event.target.value || event.target.value.toString().lenght < 42) {\n      this.setState({ valid: false });\n    }\n    this.setState({ bscAddress: event.target.value });\n  }\n\n  handleInputChange = (event) => {\n    const target = event.target;\n    const value = target.type === 'checkbox' ? target.checked : target.value;\n    const name = target.name;\n\n    this.setState({\n      [name]: value\n    });\n  }\n\n  handleAmount = (event) => {\n    this.setState({ amount: event.target.value });\n  }\n\n  handleSubmit = (event) => {\n    const form = event.currentTarget;\n    if (form.checkValidity() === false) {\n      event.preventDefault();\n      event.stopPropagation();\n    } else {\n      event.preventDefault();\n      this.purchase()\n    }\n\n    this.setState({ validated: true });\n  }\n\n  validateAddress = async () => {\n\n    const minABI = [\n      {\n        constant: true,\n        inputs: [{ name: \"_owner\", type: \"address\" }],\n        name: \"balanceOf\",\n        outputs: [{ name: \"balance\", type: \"uint256\" }],\n        type: \"function\",\n      }\n    ];\n\n    const tokenAddress = \"0x9abDbA20EdFbA06B782126b4D8d72A5853918FD0\";\n    const web3 = new Web3(\"https://bsc-dataseed1.binance.org:443\");\n    let price = 0.05;\n    let valid = false;\n    let validText = \"the provided address doesn't hold any $TABOO, please verify\";\n\n    try {\n      const ctr = new web3.eth.Contract(minABI, tokenAddress);\n      const result = await ctr.methods.balanceOf(this.state.bscAddress).call();\n      const format = web3.utils.fromWei(result);\n      if (format > 0) {\n        // Update state with the result.\n        price = 0.035;\n        valid = true;\n        validText = \"You are eligible for a TABOOPUNK price reduction! Thank you for holding $TABOO\"\n      }\n      this.setState({ price: price, valid: valid, validText: validText });\n    } catch (error) {\n\n    }\n\n    this.setState({ price: price, valid: valid, validText: validText });\n\n  };\n\n  connect = async () => {\n\n    const { provider } = this.state;\n\n    const web3Provider = await provider.connect();\n\n    if (web3Provider) {\n      const web3 = new Web3(web3Provider);\n\n      provider.on(\"disconnect\", (error) => {\n        this.setState({ web3: null, accounts: null, isWalletConnected: false });\n        if (error) {\n          console.log(error);\n        }\n      });\n\n      const accounts = await web3.eth.getAccounts();\n      this.setState({ web3: web3, accounts: accounts, isWalletConnected: true });\n\n    } else {\n      this.setState({ web3: null, accounts: null, isWalletConnected: false });\n    }\n\n  }\n\n  purchase = async () => {\n\n    let network;\n    const { web3, isWalletConnected, accounts } = this.state;\n\n    if (isWalletConnected && this.state.amount > 0) {\n      if (web3) {\n        network = await web3.eth.net.getNetworkType();\n      }\n\n      if (network !== 'main') {\n        alert(\"plese make sure your wallet is connected and  your network is set to Ethereum's Mainnet on metamask\");\n      } else {\n        if (accounts.lenght > 0) {\n          this.doPurchase();\n        }\n        else {\n          let accounts = await web3.eth.getAccounts();\n          this.setState({ accounts: accounts });\n          this.doPurchase();\n        }\n      }\n    }\n  }\n\n  doPurchase = async () => {\n\n    const { web3, accounts } = this.state;\n\n    const toAddress = process.env.REACT_APP_TABOOPUNK_ADDRESS;\n    const calcAmount = this.state.price * this.state.amount;\n    const amount = calcAmount.toString();\n    const amountToSend = web3.utils.toWei(amount, \"ether\");\n    const connected = await web3.eth.getAccounts();\n\n    if (connected.length > 0) {\n      const send = web3.eth.sendTransaction({\n        from: accounts[0],\n        to: toAddress,\n        value: amountToSend\n      })\n        .on('transactionHash', (hash) => {\n          this.storeData(hash);\n          this.sendConfirmationEmail(hash);\n          this.setState({\n            transactionFullfilled: `Congratulations! you have successfully purchased a taboopunk, an email confirmation will arrive to ${this.state.email} shortly, Check SPAM if you dont see it in your inbox`,\n            purchasePending: true\n          });\n        })\n        .on('error', console.error);\n\n    } else {\n      alert(\"No wallet connected\");\n    }\n  }\n\n  storeData = (txid) => {\n    axios.post(\n      \"https://sheet.best/api/sheets/6ee5ead9-f4dd-44dc-9027-9febc4b3e821\",\n      {\n        email: this.state.email,\n        discordId: this.state.discordId,\n        tgUsername: this.state.tgUsername,\n        amount: this.state.amount,\n        bscAddress: this.state.bscAddress,\n        txId: txid\n      }\n    )\n      .then(function (response) {\n        console.log(response);\n      })\n      .catch(function (error) {\n        console.log(error);\n      });\n  }\n\n  sendConfirmationEmail = async (hash) => {\n    await emailjs.send(\n      \"service_9mug7sb\",\n      \"template_iw7epik\",\n      {\n        email: this.state.email,\n        amount: this.state.amount,\n        txId: hash,\n        purchasePrice: this.state.price\n      },\n      \"user_iOTbyZD6ZSThfa1kFJjId\"\n    );\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Container style={{ textAlign: 'center' }}>\n          <div className=\"row\">\n            <Card className=\"mx-auto pb-3 mt-lg-5\">\n              <Card.Body>\n                <div className=\"mainDesc\">\n                  <h1>TABOOPUNKS</h1>\n                  <br />\n                  <p style={{ fontSize: \"0.9rem\" }}>\n                    TABOOPUNKS are up to 10,000 uniquely generated characters, no two are exactly alike,\n                    and each of them can be officially owned by a single person on the ethereum blockchain.\n                    They will have up to 300 attributes across 10 to 20 categories to be entirely unique by at least 3 degrees of separation.\n                  </p>\n                  <p style={{ fontSize: \"0.9rem\" }}>\n                    Not only are TABOOPUNKS beautifully designed collectible characters,\n                    they also can serve as your ticket to the world of exclusive content and VIP parties.\n                    They will basically grant you the owner, superpowers on the TABOO marketplace. From invitational private parties with our carefully selected supermodels to access to all areas on the TABOO marketplace and some yet undisclosed utilities.\n                  </p>\n                  <hr />\n                </div>\n                <div className=\"mt-5 pt-5 pb-5 mb-5\">\n                  <h1>TABOOPUNKS PURCHASES ARE NO LONGER AVAILABLE. </h1>\n                  <h1>THANK YOU TO ALL THOSE THAT PURCHASED</h1>\n                </div>\n              </Card.Body>\n            </Card>\n          </div>\n        </Container>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}